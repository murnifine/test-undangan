generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  role          String?           @default("user")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Profile       Profile[]
  templates     TemplateUndangan[]
}

// model User {
//   id      Int      @id @default(autoincrement())
//   name    String
//   email   String   @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]

//   Profile Profile?
// }

// model Admin {
//   id        Int               @id @default(autoincrement())
//   email     String            @unique
//   name      String
//   templates TemplateUndangan?
// }

model Profile {
  id     Int     @id @default(autoincrement())
  userId String
  slug   String?

  nama_pria           String?
  nama_panggilan_pria String?
  nama_ayah_pria      String?
  nama_ibu_pria       String?

  nama_wanita           String?
  nama_panggilan_wanita String?
  nama_ayah_wanita      String?
  nama_ibu_wanita       String?

  pria_fb String?
  pria_ig String?
  pria_tk String?

  wanita_fb String?
  wanita_ig String?
  wanita_tk String?

  url_foto_pria   String?
  url_foto_wanita String?
  url_foto_utama  String?

  dateTime_resepsi    DateTime?         @default(now())
  dateTime_akad_nikah DateTime?         @default(now())
  alamat_akad_nikah   String?
  alamat_resepsi      String?
  url_akad_nikah   String?
  url_alamat_resepsi      String?
  rekening_bank        bank[]
  photo_moment        PhotoMoments[]
  templateId          Int?
  template            TemplateUndangan? @relation(fields: [templateId], references: [id])
  user                User              @relation(fields: [userId], references: [id])
  ucapan              Ucapan[]
  order              Order[]

  musicId          String?
  music            Music? @relation(fields: [musicId], references: [id])
}

model bank{
  id      Int      @id @default(autoincrement())
  nama_bank String?
  nomor_req Int?
  profileId Int?
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

enum category {
  undangan_pernikahan
  undangan_ulang_tahun
  undangan_aqiqah
  undangan_pingitan
  undangan_katoba
}

model TemplateUndangan {
  id      Int      @id @default(autoincrement())
  nama    String?
  userId  String?
  profile Profile[]
  user    User?     @relation(fields: [userId], references: [id])
  category category?
  harga Int? @default(0)
  discount Int? @default(0)
  url_img String?
}

model PhotoMoments {
  id        Int      @id @default(autoincrement())

  url_foto  String?
  profileId Int?
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Ucapan {
  id        Int      @id @default(autoincrement())
  nama      String?
  pesan     String?
  profileId Int?
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
}


model Order {
  id        String      @id @default(cuid())

  price     Float
  status    String
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  // customer  String
  // product   String
  // quantity  Int
}




model Music {
 id        String      @id @default(cuid())
 title String
 url String

profile Profile[]
 
}